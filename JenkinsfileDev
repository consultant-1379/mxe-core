def SLAVE_NODE = null
def onlyDocModified = true

node(label: 'mxe-core') {
    stage('Nominating build node') {
        SLAVE_NODE = "${NODE_NAME}"
        echo "Executing build on ${SLAVE_NODE}"
    }
}

pipeline {

    options {
        buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '50'))
        // Due to how versioning works
        disableConcurrentBuilds()
    }

    agent {
        node {
            label "${SLAVE_NODE}"
        }
    }

    environment {
        GIT_AUTHOR_NAME = "mxecifunc"
        GIT_AUTHOR_EMAIL = "PDLMMECIMM@pdl.internal.ericsson.com"
        GIT_COMMITTER_NAME = "${USER}"
        GIT_COMMITTER_EMAIL = "${GIT_AUTHOR_EMAIL}"
        GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no -o PubKeyAuthentication=yes"
        RELEASE = 'true'
        VERSION_PREFIX_FILE="VERSION_PREFIX_DEV"
        // $HOME/.docker for local runs, otherwise set to Jenkins workspace
        DOCKER_CONFIG="$WORKSPACE"
    }

    stages {
            stage('Environment info') {
                steps {
                    sh 'printenv | sort'
                }
            }

            stage('Prepare') {
                steps {
                    sshagent(credentials: ['ssh-key-mxecifunc']) {
                        sh 'git clean -xdff'
                        sh 'git submodule sync'
                        sh 'git submodule update --init --recursive'

                        sh './bob/bob clean'
                        script {
                            final String modifiedFiles = sh script: 'git diff-tree --no-commit-id --name-only -r `git rev-parse HEAD`', returnStdout: true
                            println modifiedFiles
                            for (String modifiedFile : modifiedFiles.split('\\R')) {
                                if (!modifiedFile.startsWith('doc/')) {
                                    println 'Found non document modification: ' + modifiedFile
                                    onlyDocModified = false
                                    break
                                }
                            }
                        }
                    }
                }
            }

            stage('Init') {
                steps {
                    sh './bob/bob init'
                    sh './bob/bob generate-requirements'
                    sh './bob/bob init-drop'
                    script {
                        currentBuild.displayName = readFile('.bob/var.version')
                        gerritReview labels: [:], message: 'Build version: ' + currentBuild.displayName

                        withCredentials([file(credentialsId: 'ARM_DOCKER_CONFIG', variable: 'DOCKER_CONFIG_FILE')]) {
                            writeFile file: 'config.json', text: readFile(DOCKER_CONFIG_FILE)
                        }
                    }
                }
            }

            stage('Lint') {
                steps {
                    sh './bob/bob lint'
                }
            }

            stage('Build source code') {
                when { expression { !onlyDocModified } }
                stages {
                    stage("Parallel build"){
                        steps {
                            parallel(
                                'backend-java': {
                                    sh './bob/bob build-java-backend'
                                },
                                'gui-nodejs': {
                                    sh './bob/bob build:gui'
                                },
                                'cli-go-linux': {
                                    sh './bob/bob go-linux-build'
                                },
                                'cli-go-windows':{
                                    sh './bob/bob go-windows-build'
                                },
                                "cli-go-macos":{
                                    sh './bob/bob go-macos-build'
                                },
                                "cli-go-mxe-generate":{
                                    sh './bob/bob go-linux-build-mxe-generate'
                                },
                                'keycloak-gatekeeper-go': {
                                    sh './bob/bob build:keycloak-gatekeeper'
                                },
                                'jupyterhub-extension' : {
                                    sh './bob/bob build:mxe-jupyter-hub-extension'
                                }
                            )
                        }
                    }

                    stage("Archive artifacts"){
                        steps {
                            sh './bob/bob build:make-essentials-zip'
                            script {
                                archiveArtifacts 'cli/bin/*/mxe-cli-*'
                                archiveArtifacts 'essentials/mxe-essentials*.zip'
                            }
                        }
                    }
                }
            }

            stage('Lock slave') {

                options {
                    lock(resource: "${SLAVE_NODE}")
                }

                stages { //stages nest1

                    stage('Build Docker images') {
                        steps {
                            parallel(
                                    'modelservice': {
                                        sh './bob/bob image:modelservice'
                                    },
                                    'model-catalogue-service': {
                                        sh './bob/bob image:model-catalogue-service'
                                    },
                                    'model-training-service': {
                                        sh './bob/bob image:model-training-service'
                                    },
                                    'pre-upgrade-job': {
                                        sh './bob/bob image:pre-upgrade-job'
                                    },
                                    'default-backend': {
                                        sh './bob/bob image:default-backend'
                                    },
                                    'db-init': {
                                        sh './bob/bob image:db-init'
                                    },
                                    'gui': {
                                        sh './bob/bob image:gui'
                                    },
                                    'mxe-jupyterlab': {
                                        sh './bob/bob image:eric-mxe-jupyterlab'
                                    },
                                    'kubernetes-modifier': {
                                        sh './bob/bob image:kubernetes-modifier'
                                    },
                                    'keycloak-init': {
                                        sh './bob/bob image:keycloak-init'
                                    },
                                    'keycloak-gatekeeper': {
                                        sh './bob/bob image:keycloak-gatekeeper'
                                    },
                                    'jupyterhub': {
                                        sh './bob/bob image:eric-mxe-jupyterhub'
                                    },
                                    'configurable-http-proxy': {
                                        sh './bob/bob image:eric-mxe-chp'
                                    },
                                    'author-service': {
                                        sh './bob/bob image:author-service'
                                    },
                                    'kafka-pyconsumer': {
                                        sh './bob/bob image:kafka-pyconsumer'
                                    },
                                    'deployment-manager':{
                                        sh './bob/bob image:deployment-manager'
                                    },
                                    'deployment-manager-init':{
                                        sh './bob/bob image:mxe-deployer-init'
                                    },
                                    'packager':{
                                        sh './bob/bob image:build-packager'
                                    },
                                    'model-base':{
                                        sh './bob/bob image:build-model-base'
                                    },
                                    'mxe-cli-image':{
                                        sh './bob/bob image:build-mxe-cli-image'
                                    }
                            )
                        }//steps
                    }//stage Build Docker images

                    stage('Publish local') {
                        steps {
                            withCredentials([
                                    string(credentialsId: 'arm-api-token-mxecifunc', variable: 'API_TOKEN'),
                                    file(credentialsId: 'helm-credentials', variable: 'HELM_REPO_CREDENTIALS'),
                            ]) {
                                sh './bob/bob publish-local'
                                sh './bob/bob publish-drop'
                                sh './bob/bob publish-cleanup'
                            }
                        }
                    }//stage 'Publish local'

                }//stages nest1

            }//stg Lock Slave
    } //stages
}//pipeline