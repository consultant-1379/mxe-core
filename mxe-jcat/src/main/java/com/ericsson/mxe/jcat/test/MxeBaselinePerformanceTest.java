package com.ericsson.mxe.jcat.test;

import static com.ericsson.mxe.jcat.driver.cli.BaselineDriver.Params.params;
import java.util.List;
import java.util.function.Function;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import com.ericsson.mxe.jcat.command.result.CommandResult;
import com.ericsson.mxe.jcat.config.TestExecutionHost;
import com.ericsson.mxe.jcat.driver.cli.BaselineDriver;
import com.ericsson.mxe.jcat.driver.cli.BaselineDriver.BaselineResult;
import com.ericsson.mxe.jcat.driver.cli.MxeCliDriver;
import com.ericsson.mxe.jcat.driver.util.DriverFactory;
import se.ericsson.jcat.fw.annotations.JcatClass;
import se.ericsson.jcat.fw.annotations.JcatMethod;

/**
 * @JcatDocChapterDescription Chapter covering baseline performance tests.
 */
@JcatClass(chapterName = "Baseline Performance Tests")
public class MxeBaselinePerformanceTest extends MxeTestBase {

    /**
     * @JcatTcDescription Perform inception3 baseline test.
     * @JcatTcPreconditions Baseline test node is running, python3 and pip3 are installed. User running this TC should
     *                      have root access.
     * @JcatTcInstruction Run baseline test for the given model. The sum prediction time should be measured from which
     *                    an average prediction time can be calculated.
     * @JcatTcAction Copy model and test images to test node
     * @JcatTcActionResult Files copied
     * @JcatTcAction Install model requirements using the python3/pip3 requirements file on the test node
     * @JcatTcActionResult Requirements are installed.
     * @JcatTcAction Run prediction using the model and test images on the test node
     * @JcatTcActionResult Prediction finished, results are available
     * @JcatTcAction Log test results
     * @JcatTcActionResult Test results are displayed in logs
     * @JcatTcPostconditions NA
     */
    @Test
    @JcatMethod(testTag = "TEST-MXE-PERFORM-BASELINE-INCEPTION3-TEST",
            testTitle = "Perform baseline test for Inception3 model")
    @Parameters({"testScriptName", "modelBaseDir", "imagedir", "workdir", "requirements", "pip", "python"})
    public void performBaselineInception3Test(String testScriptName, String modelBaseDir, String imagedir,
            String workdir, String requirements, @Optional("pip3") String pip, @Optional("python3") String python) {

        Function<MxeCliDriver, BaselineDriver> baselineDriverBuilder = (MxeCliDriver cliDriver) -> DriverFactory
                .getBaselineDriver(cliDriver, params().testScriptName(testScriptName).modelBaseDir(modelBaseDir)
                        .imagedir(imagedir).workdir(workdir).requirementsPath(requirements));

        Function<BaselineDriver, Pair<CommandResult, BaselineResult>> executeTest =
                (BaselineDriver baselineDriver) -> baselineDriver.executeInception3BaselineTest(python);


        performBaselineTest(pip, baselineDriverBuilder, executeTest);

    }

    /**
     * @JcatTcDescription Perform Telco model baseline test.
     * @JcatTcPreconditions Baseline test node is running, python3 and pip3 are installed. User running this TC should
     *                      have root access.
     * @JcatTcInstruction Run baseline test for the given model. The sum prediction time should be measured from which
     *                    an average prediction time can be calculated.
     * @JcatTcAction Copy model to test node
     * @JcatTcActionResult Files copied
     * @JcatTcAction Install model requirements using the python3/pip3 requirements file on the test node
     * @JcatTcActionResult Requirements are installed.
     * @JcatTcAction Run prediction using the model and random input data generated by python script
     * @JcatTcActionResult Prediction finished, results are available
     * @JcatTcAction Log test results
     * @JcatTcActionResult Test results are displayed in logs
     * @JcatTcPostconditions NA
     */
    @Test
    @JcatMethod(testTag = "TEST-MXE-PERFORM-BASELINE-TELCO-TEST", testTitle = "Perform baseline test for Telco model")
    @Parameters({"testScriptName", "modelBaseDir", "count", "workdir", "requirements", "pip", "python"})
    public void performBaselineTelcoTest(String testScriptName, String modelBaseDir, int count, String workdir,
            String requirements, @Optional("pip3") String pip, @Optional("python3") String python) {

        Function<MxeCliDriver, BaselineDriver> baselineDriverBuilder = (MxeCliDriver cliDriver) -> DriverFactory
                .getBaselineDriver(cliDriver, params().modelBaseDir(modelBaseDir).testScriptName(testScriptName)
                        .count(count).workdir(workdir).requirementsPath(requirements));

        Function<BaselineDriver, Pair<CommandResult, BaselineResult>> executeTest =
                (BaselineDriver baselineDriver) -> baselineDriver.executeTelcoBaselineTest(python);

        performBaselineTest(pip, baselineDriverBuilder, executeTest);

    }

    /**
     * @JcatTcDescription Perform Empty model baseline test.
     * @JcatTcPreconditions Baseline test node is running, python3 and pip3 are installed. User running this TC should
     *                      have root access.
     * @JcatTcInstruction Run baseline test for the given model. The sum prediction time should be measured from which
     *                    an average prediction time can be calculated.
     * @JcatTcAction Copy model to test node
     * @JcatTcActionResult Files copied
     * @JcatTcAction Run prediction using the model and random input data generated by python script
     * @JcatTcActionResult Prediction finished, results are available
     * @JcatTcAction Log test results
     * @JcatTcActionResult Test results are displayed in logs
     * @JcatTcPostconditions NA
     */
    @Test
    @JcatMethod(testTag = "TEST-MXE-PERFORM-BASELINE-EMPTY-TEST", testTitle = "Perform baseline test for Empty model")
    @Parameters({"testScriptName", "modelBaseDir", "count", "workdir", "pip", "python"})
    public void performBaselineEmptyTest(String testScriptName, String modelBaseDir, int count, String workdir,
            @Optional("pip3") String pip, @Optional("python3") String python) {

        Function<MxeCliDriver, BaselineDriver> baselineDriverBuilder =
                (MxeCliDriver cliDriver) -> DriverFactory.getBaselineDriver(cliDriver, params()
                        .modelBaseDir(modelBaseDir).testScriptName(testScriptName).count(count).workdir(workdir));

        Function<BaselineDriver, Pair<CommandResult, BaselineResult>> executeTest =
                (BaselineDriver baselineDriver) -> baselineDriver.executeEmptyBaselineTest(python);

        performBaselineTest(pip, baselineDriverBuilder, executeTest);

    }

    private void performBaselineTest(String pip, Function<MxeCliDriver, BaselineDriver> baselineDriverBuilder,
            Function<BaselineDriver, Pair<CommandResult, BaselineResult>> executeTest) {
        setTestStepBegin("Init");
        List<TestExecutionHost> nodeList = mxeCluster.getNodeList();
        final TestExecutionHost execOn;
        if (CollectionUtils.isEmpty(nodeList)) {
            execOn = testExecutionHost;
        } else {
            execOn = nodeList.get(0);
        }
        setTestInfo("Using host:" + execOn);
        setTestStepBegin("Perform Test");
        setSubTestStep("Init drivers");
        try (MxeCliDriver cliDriver = DriverFactory.getMxeCliDriver(execOn)) {
            BaselineDriver baselineDriver = baselineDriverBuilder.apply(cliDriver);
            setSubTestStep("Copy dependencies");
            baselineDriver.copyDependencies();
            if (StringUtils.isNotBlank(baselineDriver.getParams().requirementsPath)) {
                setSubTestStep("Install Requirements");
                CommandResult installRequirements = baselineDriver.installRequirements(pip);
                assertThat(installRequirements.getExitCode()).isEqualTo(0);
            }
            setSubTestStep("Execute Baseline Test");
            Pair<CommandResult, BaselineResult> baselineTestOutput = executeTest.apply(baselineDriver);

            assertThat(baselineTestOutput.getLeft().getExitCode()).isEqualTo(0);
            BaselineResult baselineResult = baselineTestOutput.getRight();

            setTestInfo("<b>Result:</b>");
            setAdditionalInfo("<b>NrOfPredictions: " + baselineResult.nrOfPredictions + "</b>");
            setAdditionalInfo("<b>Failed: " + baselineResult.failed + "</b>");
            setAdditionalInfo(
                    "<b>SumNonPredictionTime (ms): " + (long) (baselineResult.sumNonPredictionTime * 1000) + "</b>");
            setAdditionalInfo(
                    "<b>SumPredictionTime (ms): " + (long) (baselineResult.sumPredictionTime * 1000) + "</b>");
        }
    }
}
