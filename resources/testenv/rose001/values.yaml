# Set values for Helm charts of MXE
# This is a YAML-formatted file.

### DO NOT CHANGE ANCHORS! ###

# These fields are all mandatory. Please set them/change them according to your desire.

# The storage class which will be used by MXE to create persistent volumes
storageClass: &storageClass network-block

# The domain name by which MXE's api and gui will be accessible
apiHostname: &apiHostname rose001.rnd.gic.ericsson.se

# The name of a secret which contains a tls for the given hostname of the api
apiSecretName: &apiSecretName api-tls

# Whether MXE will be accessible through a default ingress controller already present on the Kubernetes cluster, or a new internal one which will be installed by MXE.
disableDefaultIngressControllerUse: &disableDefaultIngressControllerUse false

# The port on which MXE will be accessible.
apiPort: &apiPort 443

# The secret which contains the credentials for the used docker registry
installerDockerRegistrySecret: &installerDockerRegistrySecret armdocker-creds

# The docker registry which is used by majority of MXE's components
installerDockerRegistry: &installerDockerRegistry armdocker.rnd.ericsson.se

# The docker registry which is used by Seldon images
installerSeldonDockerRegistry: &installerSeldonDockerRegistry armdocker.rnd.ericsson.se/proj-mxe

# The docker registry which is used by Argo images
installerArgoDockerRegistry: &installerArgoDockerRegistry armdocker.rnd.ericsson.se/proj-mxe/argoproj

# The docker registry which is used by Ambassador
installerAmbassadorDockerRegistry: &installerAmbassadorDockerRegistry armdocker.rnd.ericsson.se/proj-mxe/quay.io/datawire/ambassador

# The docker registry which is used by Metrics Server
installerMetricsServerDockerRegistry: &installerMetricsServerDockerRegistry armdocker.rnd.ericsson.se/proj-mxe/gcr.io/google_containers/metrics-server-amd64

# User provided credentials in a form of a secret and given by its name for administering the realms in Keycloak. If not CHANGED, then the defaults are going to be used, see the Installation Guide for details.
# If this value is changed, then the corresponding secret needs to be created beforehand.
# Mandatory fields in the user provided secret:
# - kcadminid (for the admin username)
# - kcpasswd (for the admin user password)
mxeAdminSecret: &mxeAdminSecret eric-mxe-gatekeeper-keycloak-access-creds-hooked

# User provided credentials in a form of a secret and given by its name for the initial MXE user If not PROVIDED, then the defaults are going to be used, see the Installation Guide for details.
# Mandatory fields in the user provided secret:
# - username (for the initial MXE username)
# - password (for the initial MXE user password)
mxeUserSecret: &mxeUserSecret

# Whether OWASP should be enabled for endpoints.
owasp: &owasp true

# Whether OWASP should be enabled for model-endpoints. This degrades performance noticeably when it's enabled! Takes effect only if owasp is set to true
modelServiceOwasp: &modelServiceOwasp false

# Whether MXE should be installed as a cluster-wide application or only as a namespace-wide
# Namespace-wide installations don't contain Seldon. That should be installed separately.
clusterWidePermissions: &clusterWidePermissions true

# Size of the container registry volume which is used to store onboarded model and training package images.
containerRegistryVolumeSize: &containerRegistryVolumeSize 20Gi

# Size of the pypiserver volume which is used to store python packages.
pypiServerVolumeSize: &pypiServerVolumeSize 5Gi


# Whether MXE should be installed with metrics-server which is a required service for the model auto scaling functionality
# To decide you should install metrics server or not, issue the following:
#    kubectl get apiservices
# and check if you have any  "metrics.k8s.io" apiservice resource available in your K8s cluster
metricsServer: &metricsServer false

# Requires SIP-TLS ADP generic service
enableSipTls: &enableSipTls false

# Legal Warning message to be displayed on the login page of the GUI and after login on the CLI
legalWarningMessage: &legalWarningMessage |-
  *Log-on is only allowed for authorized users. If you are not an authorized user, please exit.
  In accordance with requirements of data protection laws, we hereby inform you that personally identifiable information will be handled in log files for legal, security and costs reasons.
  This system processes sensitive personal data. The misuse of such data may generate considerable harm to the data subjects. Be reminded of the confidentiality obligations you have when accessing this kind of data and the disciplinary consequences of improper handling.

# Whether to enable mTLS between MXE services using Istio service mesh
# If this field is set to "true", the label "istio-injection: enabled" MUST be attached to the mxe namespace before installation
# If this field is set to "false", the label "istio-injection" MUST be removed from the mxe namespace before installation
enableIstioMtls: &enableIstioMtls false

### DO NOT MODIFY BELOW THIS LINE! Only change anything below this line if you know what you're doing! ###

global:
  # To secure MXE's API endpoint, a certificate must be stored in a secret. This secret must be in the mxe namespace.
  # The name of the secret can be given with the next key.
  mxeApiTlsSecretName: *apiSecretName
  # To secure MXE's API endpoint, a hostname must be defined, through which the endpoint will be reachable.
  # This hostname can be given with the next key.
  mxeApiHostname: *apiHostname
  # By default, MXE uses a default ingress controller.
  # To use an internal one change the next setting to false. The behaviour of this ingress controller can be modified under eric-mxe-ingress-controller key.
  mxeDisableDefaultIngressControllerUse: *disableDefaultIngressControllerUse
  # The docker registry which will be used by the majority of containers in MXE.
  registry:
    url: *installerDockerRegistry
    # The secret which contains the credentials for the used docker registry
    pullSecret: *installerDockerRegistrySecret
  security:
    tls:
      enabled: *enableSipTls

eric-mxe-gatekeeper:
  service:
    # The port where gatekeeper, MXE's main endpoint will be exposed
    httpsPort: *apiPort
  keycloak:
    realm:
      master:
        secret:
          secretName: *mxeAdminSecret
      mxe:
        secret:
          secretName: *mxeUserSecret
          temporalUser: false
  istioMtls:
    enabled: *enableIstioMtls

eric-sec-access-mgmt:
  statefulset:
    adminSecret: *mxeAdminSecret
  ingress:
    # The host where MXE's user handling service will be exposed
    hostname: *apiHostname
    tls:
      # This setting defines whether https communication will be used for user handling.
      # It must be only enabled when there is no default ingress controller.
      enabled: *disableDefaultIngressControllerUse
      # The certificate for https communication when it is enabled.
      existingSecret: *apiSecretName
  persistence:
    tls:
      enabled: *enableSipTls
  service:
    tls:
      enabled: *enableSipTls
  tls:
    client:
      ldap:
        enabled: *enableSipTls
      pg:
        enabled: *enableSipTls
    clientCA:
      enabled: *enableSipTls
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-ambassador-ingress:
  ingress:
    owasp:
      enabled: *owasp
    modelServiceOwasp:
      enabled: *modelServiceOwasp
  istioMtls:
    enabled: false

eric-pm-server:
  server:
    persistentVolume:
      storageClass: *storageClass
  istioMtls:
    enabled: false

eric-mxe-prometheus:
  alertmanager:
    persistence:
      storageClassName: *storageClass
  ingress:
    owasp:
      enabled: *owasp
  rbac:
    clusterWide: *clusterWidePermissions
  istioMtls:
    enabled: false

eric-mxe-gui:
  ingress:
    owasp:
      enabled: *owasp
  legalWarningMessage: *legalWarningMessage
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-upgrade-jobs:
  preinstall-cleanup:
    keycloakAdminSecretNameOverride: *mxeAdminSecret
  istioMtls:
    enabled: false

# The model service which starts models in the cluster
eric-mxe-model-service:
  dockerRegistry:
    # The host name of the internal Docker registry. This will be used by the used Kubernetes cluster to start stored models
    externalHostname: *apiHostname
    # The port of the internal Docker registry. If the default ingress controller is disabled, then this will be the same as the internal ingress controller's port
    externalPort: *apiPort
  ingress:
    owasp:
      enabled: *owasp
  istioMtls:
    enabled: *enableIstioMtls

# The model catalogue service
eric-mxe-model-catalogue-service:
  dockerRegistry:
    # The host name of the internal Docker registry. This will be used by the used Kubernetes cluster to start stored training jobs
    externalHostname: *apiHostname
    # The port of the internal Docker registry. If the default ingress controller is disabled, then this will be the same as the internal ingress controller's port
    externalPort: *apiPort
  ingress:
    owasp:
      enabled: *owasp
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-pypiserver:
  persistentVolumeClaim:
    storageClassName: *storageClass
    size: *pypiServerVolumeSize
  ingress:
    owasp:
      enabled: *owasp
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-jupyterhub:
  hub:
    db:
      pvc:
        # By default it uses the default storage class. If there is no default storage class, and it's not specified, then pod creation will fail.
        storageClassName: *storageClass
  singleuser:
    storage:
      dynamic:
        storageClass: *storageClass
  ingress:
    owasp:
      enabled: *owasp
  istioMtls:
    enabled: false

# Documentation of Seldon core's options: https://github.com/SeldonIO/seldon-core/blob/v1.0.1/helm-charts/seldon-core-operator/values.yaml
seldon-core-operator:
  enabled: *clusterWidePermissions
  image:
    # The docker repository where Seldon operator's image can be found
    registry: *installerSeldonDockerRegistry
  engine:
    image:
      # The docker repository where Seldon's sidecar image can be found
      registry: *installerSeldonDockerRegistry
  istioMtls:
    enabled: false

ambassador:
  image:
    # The docker repository where Ambassador's images can be found
    repository: *installerAmbassadorDockerRegistry
  imagePullSecrets:
    - name: *installerDockerRegistrySecret
  istioMtls:
    enabled: false

# Documentation of Document Database PG's options: http://calstore.internal.ericsson.com/elex?LI=EN/LZN7020476/2R*&FN=1_1531-CAV10116_2Uen.*.html&HT=id_sjxl
eric-data-document-database-pg:
  persistentVolumeClaim:
    storageClassName: *storageClass
  security:
    postgres:
      tls:
        enable: *enableSipTls
  istioMtls:
    enabled: *enableIstioMtls

# Documentation of Docker registry's options: http://calstore.internal.ericsson.com/elex?LI=EN/LZN7020497/1R*&FN=1_1531-CAV10168_1Uen.*.html&HT=id_775u
eric-lcm-container-registry:
  ingress:
    # It's mandatory to give a hostname, by which the Docker container will be accessible to nodes in the cluster
    host: *apiHostname
    hostname: *apiHostname
    tls:
      # For ingress, https is forced by default. This means that the registry will work as a secure registry.
      # For insecure registry, the next line should be uncommented.
      enabled: *disableDefaultIngressControllerUse
      # The certificate for https must be stored in a kubernetes tls secret.
      # In the next line, the name of the secret must be given, if tls is enabled.
      secretName: *apiSecretName
  registry:
    volumes:
      data:
        # The storage class which is used to store images. By default it uses the default storage class. If there is no default storage class, and it's not specified, then pod creation will fail.
        storageClass: *storageClass
        # The size of the persistent volume. Depending on the storage class type the volume may not be resized after install.
        size: *containerRegistryVolumeSize
  istioMtls:
    enabled: false

# Documentation of metrics server https://github.com/helm/charts/tree/master/stable/metrics-server#configuration
metrics-server:
  enabled: *metricsServer
  image:
    repository: *installerMetricsServerDockerRegistry
  imagePullSecrets:
    - *installerDockerRegistrySecret
  istioMtls:
    enabled: false

argo:
  enabled: *clusterWidePermissions
  images:
    namespace: *installerArgoDockerRegistry
  istioMtls:
    enabled: *enableIstioMtls

# Documentation of Object Storage http://calstore.internal.ericsson.com/elex?LI=EN/LZN7830042*&FN=1_1531-APR20147_1Uen.*.html
eric-data-object-storage-mn:
  persistentVolumeClaim:
    # By default it uses the default storage class. If there is no default storage class, and it's not specified, then pod creation will fail.
    storageClassName: *storageClass
  tls:
    enabled: *enableSipTls
  autoEncryption:
    enabled: *enableSipTls
  istioMtls:
    enabled: *enableIstioMtls

# Documentation of Key Value Database AG's options: http://calstore.internal.ericsson.com/elex?LI=EN/LZN7020482/3R1A
eric-data-kvdb-ag-operator:
  security:
    tls:
      enabled: *enableSipTls
  istioMtls:
    enabled: false

eric-data-kvdb-ag:
  persistence:
    # Persistent storage for database containers and admin manager
    data:
      persistentVolumeClaim:
        storageClassName: *storageClass
    backup:
      persistentVolumeClaim:
        storageClassName: *storageClass
  security:
    tls:
      enabled: *enableSipTls
  istioMtls:
    enabled: false

eric-mxe-dind:
  istioMtls:
    enabled: false

eric-mxe-author-service:
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-default-backend:
  istioMtls:
    enabled: *enableIstioMtls

eric-mxe-ingress-controller:
  istioMtls:
    enabled: *enableIstioMtls
mxe:
  istioMtls:
    enabled: *enableIstioMtls
