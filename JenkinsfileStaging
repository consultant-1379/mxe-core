/* ADP Application Staging */
def SLAVE_NODE = null

def iamVersion() {
    if ("${env.CHART_NAME}" == "eric-sec-access-mgmt") {
        return "${env.CHART_VERSION}".replace("+", "-")
    }
    return ''
}

node(label: 'mxe-core') {
    stage('Nominating build node') {
        SLAVE_NODE = "${NODE_NAME}"
        echo "Executing build on ${SLAVE_NODE}"
    }
}

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '10'))
    }

    agent {
        node {
            label "${SLAVE_NODE}"
        }
    }

    environment {
        GIT_AUTHOR_NAME = "mxecifunc"
        GIT_AUTHOR_EMAIL = "PDLMMECIMM@pdl.internal.ericsson.com"
        GIT_COMMITTER_NAME = "${USER}"
        GIT_COMMITTER_EMAIL = "${GIT_AUTHOR_EMAIL}"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no -o PubKeyAuthentication=yes"
        IAM_VERSION = iamVersion()
        RELEASE = 'true'
        VERSION_PREFIX_FILE="VERSION_PREFIX_STAGING"
        CREDENTIALS_SERO_ARTIFACTORY = credentials('mxecifunc-passwd')
        SERO_ARTIFACTORY_REPO_USER = "${env.CREDENTIALS_SERO_ARTIFACTORY_USR}"
        SERO_ARTIFACTORY_REPO_PASS = "${env.CREDENTIALS_SERO_ARTIFACTORY_PSW}"
        DOCKER_CONFIG="$WORKSPACE"
    }

    stages {
        stage('Environment info') {
            steps {
                sh 'printenv | sort'
            }
        }

        stage('Prepare') {
            steps {
                echo "CHART NAME: ${env.CHART_NAME}"
                echo "CHART REPO: ${env.CHART_REPO}"
                echo "CHART VERSION: ${env.CHART_VERSION}"
                script {
                    currentBuild.description = "${env.CHART_NAME}-${env.CHART_VERSION}"
                }

                sshagent(credentials: ['ssh-key-mxecifunc']) {
                    sh 'git clean -xdff'
                    sh 'git submodule sync'
                    sh 'git submodule update --init --recursive'

                    sh './bob/bob clean'
                }
            }
        }

        stage('Update local chart requirements') {
            steps {
                sh './bob/bob update-requirements'
            }
        }

        stage('Commit changes') {
            steps {
                sshagent(credentials: ['ssh-key-mxecifunc']) {
                    sh './bob/bob commit-new-requirements'
                }
            }
        }

        stage('Init') {
            steps {
                sh './bob/bob init'
                sh './bob/bob generate-adp-requirements'
                sh './bob/bob init-dev'
                script{
                    withCredentials([file(credentialsId: 'ARM_DOCKER_CONFIG', variable: 'DOCKER_CONFIG_FILE')]) {
                        writeFile file: 'config.json', text: readFile(DOCKER_CONFIG_FILE)
                    }
                }
            }
        }

        stage('Build source code') {
            stages {
                stage("Parallel Build CLI"){
                    steps {
                        parallel(
                            'cli-go-linux': {
                                sh './bob/bob go-linux-build'
                            },
                            'cli-go-windows':{
                                sh './bob/bob go-windows-build'
                            },
                            "cli-go-macos":{
                                sh './bob/bob go-macos-build'
                            },
                            "cli-go-mxe-generate":{
                                    sh './bob/bob go-linux-build-mxe-generate'
                                                                }
                        )
                    }
                }

                stage("Parallel Build Source"){
                    steps {
                        parallel(
                            'backend-java': {
                                sh './bob/bob build-java-backend'
                            },
                            'gui-nodejs': {
                                sh './bob/bob build:gui'
                            },
                            'keycloak-gatekeeper-go': {
                                sh './bob/bob build:keycloak-gatekeeper'
                            },
                            'jupyterhub-extension' : {
                                sh './bob/bob build:mxe-jupyter-hub-extension'
                            }
                        )
                    }
                }

                stage("Archive artifacts"){
                    steps{
                        sh './bob/bob build:make-essentials-zip'    
                        script {
                            archiveArtifacts 'cli/bin/*/mxe-cli-*'
                            archiveArtifacts 'essentials/mxe-essentials*.zip'
                        }
                    }
                }
            }
        }


        stage('Lock slave') {
            options {
                lock(resource: "${SLAVE_NODE}")
            }
            stages {
                stage('Build Docker images') {
                    steps {
                        parallel(
                                'modelservice': {
                                    sh './bob/bob image:modelservice'
                                },
                                'model-catalogue-service': {
                                    sh './bob/bob image:model-catalogue-service'
                                },
                                'model-training-service': {
                                    sh './bob/bob image:model-training-service'
                                },
                                'pre-upgrade-job': {
                                    sh './bob/bob image:pre-upgrade-job'
                                },
                                'default-backend': {
                                    sh './bob/bob image:default-backend'
                                },
                                'db-init': {
                                    sh './bob/bob image:db-init'
                                },
                                'gui': {
                                    sh './bob/bob image:gui'
                                },
                                'mxe-jupyterlab': {
                                    sh './bob/bob image:eric-mxe-jupyterlab'
                                },
                                'kubernetes-modifier': {
                                    sh './bob/bob image:kubernetes-modifier'
                                },
                                'keycloak-init': {
                                    sh './bob/bob image:keycloak-init'
                                },
                                'keycloak-gatekeeper': {
                                    sh './bob/bob image:keycloak-gatekeeper'
                                },
                                'jupyterhub': {
                                    sh './bob/bob image:eric-mxe-jupyterhub'
                                },
                                'configurable-http-proxy': {
                                    sh './bob/bob image:eric-mxe-chp'
                                },
                                'author-service': {
                                    sh './bob/bob image:author-service'
                                },
                                'kafka-pyconsumer': {
                                    sh './bob/bob image:kafka-pyconsumer'
                                },
                                'deployment-manager':{
                                    sh './bob/bob image:deployment-manager'
                                },
                                'deployment-manager-init':{
                                    sh './bob/bob image:mxe-deployer-init'
                                },
                                'packager':{
                                    sh './bob/bob image:build-packager'
                                },
                                'model-base':{
                                    sh './bob/bob image:build-model-base'
                                },
                                'mxe-cli-image':{
                                    sh './bob/bob image:build-mxe-cli-image'
                                }
                        )
                    }
                }

                stage('Build IAM'){
                    when { expression { env.CHART_NAME == 'eric-sec-access-mgmt' } }
                    steps{
                            sh './bob/bob build:keycloak-event-listener'
                            sh './bob/bob iam:build-iam-image'
                            sh './bob/bob iam:push-iam-image'
                        }
                    }

                stage('Publish local') {
                    steps {
                        withCredentials([
                                string(credentialsId: 'arm-api-token-mxecifunc', variable: 'API_TOKEN'),
                                file(credentialsId: 'helm-credentials', variable: 'HELM_REPO_CREDENTIALS'),
                        ]) {
                            sh './bob/bob publish-local'
                        }
                    }
                }
            }
        }

        stage('Lock k8s cluster') {
            options {
                lock(resource: null, label: 'bob-ci-stage', quantity: 1, variable: 'SYSTEM')
            }
            environment{
                KUBECONFIG=credentials("kubeconfig-${env.SYSTEM}")
                MXESECRETS=credentials("mxek8ssecrets-${env.SYSTEM}")
                TESTMXEENDPOINT=credentials("secure-mxeendpoint-${env.SYSTEM}")
                TESTDEPLOYERENDPOINT=credentials("secure-deployerendpoint-${env.SYSTEM}")
                TESTDEPLOYERAUTHENDPOINT=credentials("secure-oauthendpoint-${env.SYSTEM}")
                GITOPS_REPO=credentials("secure-gitopsrepoendpoint-${env.SYSTEM}")
            }
            stages {
                stage("Print Cluster Info") {
                    steps {
                        echo "Target kubernetes system: ${env.SYSTEM}"
                        sh './bob/bob test-cluster:print-info'
                    }
                }

                stage('Install Helm Charts'){
                    steps{
                        sh './bob/bob install-helm-charts'
                    }
                }

                stage('Deploy MXE Serving Application'){
                    steps{
                        sh './bob/bob install-mxe-serving-package'
                    }
                }

                stage('Deploy MXE Optional Applications'){
                    steps {
                        parallel(
                                'mxe-worklow': {
                                    sh './bob/bob install-optional-packages:mxe-workflow'
                                },
                                'mxe-training': {
                                    sh './bob/bob install-optional-packages:mxe-training'
                                },
                                'mxe-exploration': {
                                    sh './bob/bob install-optional-packages:mxe-exploration'
                                }
                        )
                    }
                }
                
                stage('System test') {
                    steps {
                            sh './bob/bob -d test-staging'
                        }
                }   
            }
            post {
                always {
                    archiveArtifacts artifacts: 'mxe-test-reports/**/*.*', allowEmptyArchive: true
                    publishHTML(target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : 'mxe-test-reports',
                            reportFiles          : '*/report.html',
                            reportName           : "MXE Test Report"
                            ])
                }
                unsuccessful {
                    withCredentials([
                        file(credentialsId: 'kubeconfig-' + env.SYSTEM, variable: 'KUBECONFIG'),
                    ]) {
                        catchError {
                            sh "./bob/bob collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                            sh './bob/bob mxe-cleanup'
                        }
                    }
                }
            }
        }

        stage('Push changes to Git') {
            steps {
                sshagent(credentials: ['ssh-key-mxecifunc']) {
                    sh './bob/bob push-new-requirements'
                }
            }
        }
    }

    post {
        always {
            junit '''mxe-serving/modelservice/target/surefire-reports/TEST-*.xml,
                     mxe-serving/model-catalogue-service/target/surefire-reports/TEST-*.xml,
                     mxe-training/model-training-service/target/surefire-reports/TEST-*.xml,
                     cli/test-output/TEST-*.xml'''
        }
        failure {
            mail to: "PDLMMECIMM@pdl.internal.ericsson.com",
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName} / ${currentBuild.description}",
                 body: "Check at ${env.BUILD_URL}"
        }
    }
}
