def SLAVE_NODE = null

node(label: 'docker-nightly') {
    stage('Nominating build node') {
        SLAVE_NODE = "${NODE_NAME}"
        echo "Executing build on ${SLAVE_NODE}"
    }
}

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '30'))
    }

    parameters
    {
        string(name: 'Released_Version', defaultValue: 'latest', description: 'GIT Tag ID of the version from which upgrade is to be tested.')
        string(name: 'Drop_Version', defaultValue: 'latest', description: 'Build number of the version to which upgrade is to be tested.')
        choice(
            choices: ['develop', 'master'],
            description: 'Select branch to pick the provided Drop_Version to which upgrade is to be tested',
            name: 'BRANCH'
            )
    }

    agent {
        node {
            label "${SLAVE_NODE}"
        }
    }

    environment {
        GIT_AUTHOR_NAME = 'mxecifunc'
        GIT_AUTHOR_EMAIL = 'PDLMMECIMM@pdl.internal.ericsson.com'
        GIT_COMMITTER_NAME = "${USER}"
        GIT_COMMITTER_EMAIL = "${GIT_AUTHOR_EMAIL}"
        GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no -o PubKeyAuthentication=yes'
        GIT_REPO_URL = 'ssh://mxecifunc@gerrit.ericsson.se:29418/MXE/mxe-core'
        GERRIT_BRANCH = "${GIT_BRANCH}"
        RELEASE = 'true'
        UPGRADE = 'true'
        GERRIT_CREDENTIALS_ID = 'gerrit-http-password-mxecifunc'
        API_TOKEN = credentials('arm-api-token-mxecifunc')
        MINIO_MODE = 'distributed'
        CREDENTIALS_SERO_ARTIFACTORY = credentials('mxecifunc-passwd')
        SERO_ARTIFACTORY_REPO_USER = "${env.CREDENTIALS_SERO_ARTIFACTORY_USR}"
        SERO_ARTIFACTORY_REPO_PASS = "${env.CREDENTIALS_SERO_ARTIFACTORY_PSW}"
    }

    stages {
        stage('Environment info') {
            steps {
                script{
                    env.UPGRADE_VERSION = lastSuccessfulDropMXEBuild()
                    env.PREV_RELEASE_VERSION = lastSuccessfulReleaseMXEBuild()
                }
                sh 'printenv | sort'
            }
        }

        stage('Prepare') {
            steps {
                sshagent(credentials: ['ssh-key-mxecifunc']) {
                    sh 'git clean -xdff'
                    sh 'git submodule sync'
                    sh 'git submodule update --init --recursive'
                    sh './bob/bob clean'
                }
            }
        }

        stage('Lock k8s cluster') {
            options {
                lock(resource: null, label: 'bob-ci-nightly', quantity: 1, variable: 'SYSTEM')
            }
            environment {
                KUBECONFIG = credentials("kubeconfig-${env.SYSTEM}")
                TESTMXEENDPOINT = credentials("secure-mxeendpoint-${env.SYSTEM}")
                TESTDEPLOYERENDPOINT = credentials("secure-deployerendpoint-${env.SYSTEM}")
                TESTDEPLOYERAUTHENDPOINT = credentials("secure-oauthendpoint-${env.SYSTEM}")
                GITOPS_REPO = credentials("secure-gitopsrepoendpoint-${env.SYSTEM}")
                MXESECRETS = credentials("mxek8ssecrets-${env.SYSTEM}")
            }
            stages {
                stage('Print Cluster Info') {
                    steps {
                        echo "Target kubernetes system: ${env.SYSTEM}"
                        sh './bob/bob test-cluster:print-info'
                    }
                }

                stage('Helm Install') {
                    environment {
                        UPGRADE = 'false'
                    }
                    steps {
                        sh './bob/bob install-prequisite-helm-packages:pre-req'
                        dir('base-dir') {
                            // clone mxe-core codebase
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "refs/tags/${env.PREV_RELEASE_VERSION}"]],
                                extensions: [],
                                userRemoteConfigs: [[credentialsId: 'ssh-key-mxecifunc',  url: env.GIT_REPO_URL]]
                            ])
                            sshagent(credentials: ['ssh-key-mxecifunc']) {
                                sh 'git clean -xdff'
                                sh 'git submodule sync'
                                sh 'git submodule update --init --recursive'
                            }
                            // Download release essentials and cli
                            // Then Install released version of MXE
                            script {
                                // Define the URL of the file to download
                                def version = env.PREV_RELEASE_VERSION.replaceAll('\\+', '-')
                                def essentialsFileUrl = 'https://arm.seli.gic.ericsson.se/artifactory/proj-mxe-dev-generic/mxe-essentials-' + version + '.zip'
                                def cliFileUrl = 'https://arm.seli.gic.ericsson.se/artifactory/proj-mxe-dev-generic/mxe-cli-linux-' + version + '.tgz'
                                // Define the temporary directory
                                def tmpDir = '/tmp/utils'
                                // Define the target directory
                                def essentialsTargetDirectory = 'essentials/'
                                def cliTargetDirectory = 'cli/'
                                // Create the temporary and target directories
                                sh "mkdir -p ${tmpDir}"
                                // Download and unzip/untar the file
                                sh """
                                    curl -k --header "X-JFrog-Art-Api:${env.API_TOKEN}" --fail -o ${tmpDir}/essentials.zip ${essentialsFileUrl}
                                    unzip -o ${tmpDir}/essentials.zip -d ${essentialsTargetDirectory}
                                    curl -k --header "X-JFrog-Art-Api:${env.API_TOKEN}" --fail -o ${tmpDir}/cli.zip ${cliFileUrl}
                                    tar xvzf ${tmpDir}/cli.zip --overwrite --directory ${cliTargetDirectory}
                                    chmod +x cli/mxe-model cli/mxe-training cli/mxe-service cli/mxe-deploy
                                """
                                // Install released version of MXE
                                echo "Release Version: ${env.RELEASE_VERSION}"
                                sh 'mkdir -p .bob'
                                sh "echo ${env.PREV_RELEASE_VERSION} > .bob/var.version"
                                sh './bob/bob init-release:docker-helm-generic-settings-release'
                                sh './bob/bob install-helm-charts'
                                sh './bob/bob install-mxe-serving-package'
                                sh './bob/bob install-optional-packages'
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            // sh './bob/bob fetch-logs'
                            sh "./bob/bob collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                            sh './bob/bob mxe-cleanup'
                        }
                    }
                }

                stage('Upgrade') {
                    stages{
                        stage('Pre-upgrade Sanity') {
                            environment {
                                ROBOT_REPORTS_DIR = 'pre-upgrade-sanity-test-reports'
                                UPGRADE = 'true'
                            }
                            steps {
                                // Download release essentials and cli
                                // Perform pre-upgrade sanity
                                script {
                                   // Define the URL of the file to download
                                   def version = env.UPGRADE_VERSION
                                   def essentialsFileUrl = 'https://arm.seli.gic.ericsson.se/artifactory/proj-mxe-dev-generic/mxe-essentials-' + version + '.zip'
                                   def cliFileUrl = 'https://arm.seli.gic.ericsson.se/artifactory/proj-mxe-dev-generic/mxe-cli-linux-' + version + '.tgz'
                                   // Define the temporary directory
                                   def tmpDir = '/tmp/utils'
                                   // Define the target directory
                                   def essentialsTargetDirectory = 'essentials/'
                                   def cliTargetDirectory = 'cli/'
                                   // Create the temporary and target directories
                                   sh "mkdir -p ${tmpDir}"
                                   // Download and unzip/untar the file
                                   sh """
                                       curl -k --header "X-JFrog-Art-Api:${env.API_TOKEN}" --fail -o ${tmpDir}/essentials.zip ${essentialsFileUrl}
                                       unzip -o ${tmpDir}/essentials.zip -d ${essentialsTargetDirectory}
                                       curl -k --header "X-JFrog-Art-Api:${env.API_TOKEN}" --fail -o ${tmpDir}/cli.zip ${cliFileUrl}
                                       tar xvzf ${tmpDir}/cli.zip --overwrite --directory ${cliTargetDirectory}
                                       chmod +x cli/mxe-model cli/mxe-training cli/mxe-service cli/mxe-deploy
                                   """
                                   // Sanity before upgrade
                                   sh './bob/bob -d robot-functional-completeness-pre-upgrade' 
                                }
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'pre-upgrade-sanity-test-reports/**/*.*', allowEmptyArchive: true
                                    publishHTML(target: [
                                            allowMissing         : true,
                                            alwaysLinkToLastBuild: false,
                                            keepAll              : true,
                                            reportDir            : 'pre-upgrade-sanity-test-reports',
                                            reportFiles          : '*/report.html',
                                            reportName           : 'Sanity Test Report Pre Upgrade'
                                    ])
                                }
                                unsuccessful {
                                    // sh './bob/bob fetch-logs'
                                    sh "./bob/bob collect-k8s-logs || true"
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                                    sh './bob/bob mxe-cleanup'
                                }
                            }
                        }

                        stage('Helm Upgrade') {
                            steps {
                                withEnv(["UPGRADE_VERSION=${env.UPGRADE_VERSION}", "PREV_RELEASE_VERSION=${env.PREV_RELEASE_VERSION}"]){
                                    // Apply the pre-req
                                    sh "pipeline-scripts/apply_pre_req.sh -m upgrade -E"
                                }
                                script {
                                    // Upgrade from released to drop version of MXE
                                    sh "echo ${env.UPGRADE_VERSION} > .bob/var.version"
                                    sh './bob/bob init-dev:docker-helm-generic-settings-internal'
                                    sh './bob/bob init-install-helm-charts'
                                    sh './bob/bob generate-values-using-mxe-generate-linux'
                                    sh './bob/bob install-mandatory-base-packages'
                                    sh './bob/bob install-mxe-serving-package'
                                    sh './bob/bob install-optional-packages'
                                }
                            }
                            post {
                                unsuccessful {
                                    sh "./bob/bob collect-k8s-logs || true"
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                                    sh './bob/bob mxe-cleanup'
                                }
                            }
                        }

                        stage('Post-upgrade Sanity') {
                            environment {
                                ROBOT_REPORTS_DIR = 'post-upgrade-sanity-test-reports'
                            }
                            steps {
                                // Sanity post upgrade
                                sh './bob/bob -d robot-functional-completeness-post-upgrade'
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'post-upgrade-sanity-test-reports/**/*.*', allowEmptyArchive: true
                                    publishHTML(target: [
                                            allowMissing         : true,
                                            alwaysLinkToLastBuild: false,
                                            keepAll              : true,
                                            reportDir            : 'post-upgrade-sanity-test-reports',
                                            reportFiles          : '*/report.html',
                                            reportName           : 'Sanity Test Report Post Upgrade'
                                    ])
                                }
                                unsuccessful {
                                    sh "./bob/bob collect-k8s-logs || true"
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                                    sh './bob/bob mxe-cleanup'
                                }
                           }
                        }
                    }
                }

                stage('System Test Post Upgrade') {
                    environment {
                        ROBOT_REPORTS_DIR = 'upgrade-test-reports'
                    }
                    steps {
                        sh './bob/bob -d robot-functional-completeness-dev'
                        sh './bob/bob -d robot-security-dev'
                        sh './bob/bob -d robot-reliability-dev'
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'upgrade-test-reports/**/*.*', allowEmptyArchive: true
                            publishHTML(target: [
                                    allowMissing         : true,
                                    alwaysLinkToLastBuild: false,
                                    keepAll              : true,
                                    reportDir            : 'upgrade-test-reports',
                                    reportFiles          : '*/report.html',
                                    reportName           : 'Functional Test Report Post Upgrade'
                            ])
                        }
                        unsuccessful {
                            sh "./bob/bob collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                            sh './bob/bob mxe-cleanup'
                        }
                    }
                }

                stage('Rollback') {
                    stages {
                        stage('Helm Rollback') {
                            steps {
                                // Apply the pre-req
                                sh "pipeline-scripts/apply_pre_req.sh -m rollback -E"
                                // Upgrade from drop to released version
                                sh './bob/bob rollback-helm-charts'
                            }
                            post {
                                unsuccessful {
                                    sh "./bob/bob collect-k8s-logs || true"
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                                    sh './bob/bob mxe-cleanup'
                                }
                            }
                        }

                        stage('Post-rollback Sanity') {
                            environment {
                                ROBOT_REPORTS_DIR = 'post-rollback-sanity-test-reports'
                            }
                            steps {
                                // Sanity post rollback
                                sh './bob/bob -d robot-functional-completeness-post-rollback'
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'post-rollback-sanity-test-reports/**/*.*', allowEmptyArchive: true
                                    publishHTML(target: [
                                            allowMissing         : true,
                                            alwaysLinkToLastBuild: false,
                                            keepAll              : true,
                                            reportDir            : 'post-rollback-sanity-test-reports',
                                            reportFiles          : '*/report.html',
                                            reportName           : 'Sanity Test Report Post Rollback'
                                    ])
                                }
                                unsuccessful {
                                    sh "./bob/bob collect-k8s-logs || true"
                                    archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                                    sh './bob/bob mxe-cleanup'
                                }
                            }
                        }
                    }
                }

                stage('System Test Post Rollback') {
                    environment {
                        ROBOT_REPORTS_DIR = 'rollback-test-reports'
                    }
                    steps {
                        dir('base-dir') {
                            sh './bob/bob -d test-dev'
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'base-dir/rollback-test-reports/**/*.*', allowEmptyArchive: true
                            publishHTML(target: [
                                    allowMissing         : true,
                                    alwaysLinkToLastBuild: false,
                                    keepAll              : true,
                                    reportDir            : 'rollback-test-reports',
                                    reportFiles          : '*/report.html',
                                    reportName           : 'Functional Test Report Post Rollback'
                            ])
                        }
                        unsuccessful {
                            sh "./bob/bob collect-k8s-logs || true"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "k8s-logs/*"
                            sh './bob/bob mxe-cleanup'
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                sendFailureEMail()
            }
        }
    }
}

def sendFailureEMail() {
    try {
        mail to: "r.chidambaranathan@ericsson.com, karthick.k@ericsson.com, mathagi.arun.r@ericsson.com, somanath.jeeva@ericsson.com",
        subject: "[mxe] Nightly Upgrade Failed for ${currentBuild.fullDisplayName}",
        body: "Failure on ${env.JOB_NAME} <br>" +
              "<b>Refer:</b> ${env.BUILD_URL} <br><br>" +
              "<b>Note:</b> This mail was automatically sent as part of ${env.JOB_NAME} jenkins job.",
        mimeType: 'text/html'
    } catch(Exception e) {
        echo 'Email notification was not sent.'
        print e
    }
}

def lastSuccessfulDropMXEBuild() {
    def paramDropBuildVersion =  "${params.Drop_Version}"
    if (paramDropBuildVersion?.toString().trim()  == 'latest'){
       def pipelineName
        if (params.BRANCH == 'develop') {
            pipelineName = "mxe-core-dev-pipeline"
        } else if (params.BRANCH == 'master') {
            pipelineName = "mxe-core-master-pipeline"
        }
        def displayName=""
        try {
            displayName = Jenkins.instance.getItem(pipelineName).lastSuccessfulBuild.displayName
        } catch(Exception e) {
            echo 'Could not fetch the last successful build for Drop pipeline. Error:' + e.toString()
        }
        println("Selected pipeline:" + pipeline )
        println("Last Build:" + displayName )
        return displayName.replaceAll("\\s", "")
    } else {
        return paramDropBuildVersion
    }
}

def lastSuccessfulReleaseMXEBuild() {
    def paramReleaseBuildVersion =  "${params.Released_Version}"
    if (paramReleaseBuildVersion?.toString().trim()  == 'latest'){
       def pipelineName = "mxe-core-release-pipeline"
        def displayName=""
        try {
            displayName = Jenkins.instance.getItem(pipelineName).lastSuccessfulBuild.displayName
        } catch(Exception e) {
            echo 'Could not fetch the last successful build for Release pipeline. Error:' + e.toString()
        }
        println("Selected pipeline:" + pipeline )
        println("Last Build:" + displayName )
        return displayName.replaceAll("\\s", "")
    } else {
        return paramReleaseBuildVersion
    }
}
