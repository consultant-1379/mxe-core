

networkPolicy:
  argoWorkflows:
    server:
      podSelector:
        matchLabels:
          app.kubernetes.io/name: argo-workflows-argo-server
          app.kubernetes.io/component: argo-server
      ingress:
        # Allow traffic from internal ingress controller
        - from:
          - podSelector:
              matchLabels:
                app.kubernetes.io/part-of: "mxe"
                app.kubernetes.io/component: "ingress-controller"
          ports:
          - port: 2746
            protocol: TCP
      egress:
        # Allow traffic to object storage
        - to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: eric-data-object-storage-mn
                app: eric-data-object-storage-mn
          ports:
          - port: 9000
            protocol: TCP
        # Allow traffic to kube-dns for DNS resolution eg: service to IP translation
        # below example uses podSelector and namespaceSelector to allow traffic to kube-dns
        # replace <svc-port> with the port of kube-dns service
        # this can be also achieved using ipBlock with the CIDR of the kube-dns service
        - to:
          - podSelector:
              matchLabels:
                k8s-app: kube-dns
            namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: kube-system
          ports:
          - protocol: UDP
            port: <svc-port>
          - protocol: TCP
            port: <svc-port>
        # Allow traffic to istiod
        - to:
          - podSelector:
              matchLabels:
                app: istiod
                app.kubernetes.io/name: eric-mesh-controller
          ports:
          - protocol: TCP
            port: 15012
        ## Allow traffic to all Kubernetes API server endpoints
        # Below example uses ipBlock to allow traffic to all Kubernetes API server endpoints
          # To determine the svc-protocol, svc-port and kube-apiserver-IP-range, inspect the endpoint resource corresponding to kubernetes service
          # replace <svc-protocol> with the protocol of the kube-apiserver service
          # replace <svc-port> with the port of the kube-apiserver service
          # replace <kube-apiserver-IP-range> with the IP range of the kube-apiserver service
        # this can be also achieved using podSelector and namespaceSelector to allow traffic to kube-apiserver if deployed as a pod
        - to:
          - ipBlock:
              cidr: <kube-apiserver-IP-range>
          ports:
          - protocol: <svc-protocol>
            port: <svc-port>
    
    controller:
      podSelector:
        matchLabels:
          app.kubernetes.io/name: argo-workflows-workflow-controller
          app.kubernetes.io/component: workflow-controller
      
      ingress: 
        # Allow PM server to scrape metrics
        - from: 
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: eric-pm-server
          ports:
          - port: 9090
            protocol: TCP
      egress:
        # Allow traffic to kube-dns for DNS resolution eg: service to IP translation
        # below example uses podSelector and namespaceSelector to allow traffic to kube-dns
        # replace <svc-port> with the port of kube-dns service
        # this can be also achieved using ipBlock with the CIDR of the kube-dns service
        - to:
          - podSelector:
              matchLabels:
                k8s-app: kube-dns
            namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: kube-system
          ports:
          - protocol: UDP
            port: <svc-port>
          - protocol: TCP
            port: <svc-port>
        # allow traffic to istiod
        - to:
          - podSelector:
              matchLabels:
                app: istiod
                app.kubernetes.io/name: eric-mesh-controller
          ports:
          - protocol: TCP
            port: 15012
        ## Allow traffic to all Kubernetes API server endpoints
        # Below example uses ipBlock to allow traffic to all Kubernetes API server endpoints
          # To determine the svc-protocol, svc-port and kube-apiserver-IP-range, inspect the endpoint resource corresponding to kubernetes service
          # replace <svc-protocol> with the protocol of the kube-apiserver service
          # replace <svc-port> with the port of the kube-apiserver service
          # replace <kube-apiserver-IP-range> with the IP range of the kube-apiserver service
        # this can be also achieved using podSelector and namespaceSelector to allow traffic to kube-apiserver if deployed as a pod
        - to:
          - ipBlock:
              cidr: <kube-apiserver-IP-range>
          ports:
          - protocol: <svc-protocol>
            port: <svc-port>
    
    workflowPod:
      podSelector:
        matchExpressions:
        - key: workflows.argoproj.io/workflow
          operator: Exists
      ingress:
        # allow PM server to scrape custom metrics if any emitted by workflow tasks
        - from: 
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: eric-pm-server
      egress:
        # allow traffic to minio
        - to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: eric-data-object-storage-mn
                app: eric-data-object-storage-mn
          ports:
          - port: 9000
            protocol: TCP
        # Allow traffic to kube-dns for DNS resolution eg: service to IP translation
        # below example uses podSelector and namespaceSelector to allow traffic to kube-dns
        # replace <svc-port> with the port of kube-dns service
        # this can be also achieved using ipBlock with the CIDR of the kube-dns service
        - to:
          - podSelector:
              matchLabels:
                k8s-app: kube-dns
            namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: kube-system
          ports:
          - protocol: UDP
            port: <svc-port>
          - protocol: TCP
            port: <svc-port>
        # allow traffic to istiod
        - to:
          - podSelector:
              matchLabels:
                app: istiod
                app.kubernetes.io/name: eric-mesh-controller
          ports:
          - protocol: TCP
            port: 15012
        ## Allow traffic to all Kubernetes API server endpoints
        # Below example uses ipBlock to allow traffic to all Kubernetes API server endpoints
          # To determine the svc-protocol, svc-port and kube-apiserver-IP-range, inspect the endpoint resource corresponding to kubernetes service
          # replace <svc-protocol> with the protocol of the kube-apiserver service
          # replace <svc-port> with the port of the kube-apiserver service
          # replace <kube-apiserver-IP-range> with the IP range of the kube-apiserver service
        # this can be also achieved using podSelector and namespaceSelector to allow traffic to kube-apiserver if deployed as a pod
        - to:
          - ipBlock:
              cidr: <kube-apiserver-IP-range>
          ports:
          - protocol: <svc-protocol>
            port: <svc-port>