/** Copyright (c) 2022 Ericsson AB. All rights reserved. */

package com.ericsson.mxe.backendservicescommon.log;

import com.fasterxml.jackson.annotation.*;
import com.google.gson.annotations.SerializedName;
import lombok.Builder;
import lombok.Data;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({"container", "severity", "customFilters"})

@Data
@Builder
@JsonIgnoreProperties(ignoreUnknown = true)
public class LogControl {

    /**
     * Name of the image for the container producing the log event. (Required)
     *
     */
    @JsonProperty("container")
    @JsonPropertyDescription("Name of the image for the container producing the log event.")
    public String container;
    /**
     * Log event severity level. (Required)
     *
     */
    @Builder.Default
    @JsonProperty("severity")
    @JsonPropertyDescription("Log event severity level.")
    public LogControl.Severity severity = Severity.fromValue("info");
    /**
     * Optional list of log events customized filters. eg. to log events generated by a specific POD, class, package,
     * thread, etc...
     *
     */
    @Builder.Default
    @JsonProperty("customFilters")
    @JsonPropertyDescription("Optional list of log events customized filters. eg. to log events generated by a specific POD, class, package, thread, etc...")
    public List<Object> customFilters = null;

    public enum Severity {

        @SerializedName("debug")
        DEBUG("debug"), @SerializedName("info")
        INFO("info"), @SerializedName("error")
        ERROR("error");

        private final String value;
        private final static Map<String, Severity> CONSTANTS = new HashMap<String, Severity>();

        static {
            for (Severity c : values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private Severity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Severity fromValue(String value) {
            Severity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }
    }
}
