kind: Secret
apiVersion: v1
metadata:
  name: {{ include "eric-mxe-jupyterhub.hub-secret-name" . | quote }}
  labels:
    app.kubernetes.io/component: "jupyterhub-hub-secret"
    app.kubernetes.io/name: {{ include "eric-mxe-jupyterhub.hub-secret-name" . | quote }}
    {{- include "eric-mxe-jupyterhub.labels" . | nindent 4 }}
  annotations: {{ include "eric-mxe-jupyterhub.annotations" . | nindent 4 }}
type: Opaque
data:
  proxy.token: {{ (required "Proxy token must be a 32 byte random string generated with `openssl rand -hex 32`!" .Values.proxy.secretToken) | b64enc | quote }}
{{- $values := pick .Values "auth" "cull" "custom" "debug" "hub" "singleuser" }}
{{- /* trim secret values. Update here if new secrets are added! */ -}}
{{- /* make a copy of values.auth to avoid modifying the original */ -}}
{{- $_ := set $values "auth" (merge dict .Values.auth) }}
{{- $_ := set $values.auth "state" (omit $values.auth.state "cryptoKey") }}
{{- range $key, $auth := .Values.auth }}
  {{- if typeIs "map[string]interface {}" $auth }}
    {{- if (or $auth.clientSecret $auth.password) }}
      {{- $_ := set $values.auth $key (omit $auth "clientSecret" "password") }}
    {{- end }}
  {{- end }}
{{- end }}
{{- $_ := set $values "hub" (omit $values.hub "cookieSecret" "extraEnv" "extraConfigMap") -}}
{{- $_ := set $values.hub "services" dict }}
{{- range $key, $service := .Values.hub.services }}
  {{- if $service.apiToken }}
    {{- $_ := set $values.hub.services $key (omit $service "apiToken") }}
  {{- end }}
{{- end }}

{{- /* copy values.singleuser */ -}}
{{- $_ := set $values "singleuser" (omit .Values.singleuser "imagePullSecret" ) }}
{{- $_ := set $values.singleuser.image "name" (printf "%s%s" (include "eric-mxe-jupyterhub.setImageRepo" (list . .Values.imageCredentials.singleuser.registry.url .Values.imageCredentials.singleuser.repoPath "singleuser")) .Values.images.singleuser.name ) }}
{{- $_ := set $values.singleuser.networkTools.image "name" (printf "%s%s" (include "eric-mxe-jupyterhub.setImageRepo" (list . .Values.imageCredentials.networkTools.registry.url .Values.imageCredentials.networkTools.repoPath "networkTools")) .Values.images.networkTools.name ) }}

{{- /* set MXE labels on singleuser pods */ -}}
{{- $_ := set $values.singleuser.extraLabels "app.kubernetes.io/instance" .Release.Name }}

{{- $_ := set $values.singleuser.extraFiles "server_config" (dict "mountPath" "/usr/local/etc/jupyter/jupyter_server_config.py")  }}

{{- /* set MXE pod antiaffinity on singleuser pods */ -}}
{{- $_ := set (index ((index .Values.singleuser.extraPodAntiAffinity.preferred 0).podAffinityTerm.labelSelector.matchExpressions) 2) "values" (list .Release.Name) }}

{{- /* preserve behavior of deprecated hub.extraConfigMap */ -}}
{{- $_ := set $values "custom" (merge dict $values.custom .Values.hub.extraConfigMap) }}
{{- /* passthrough subset of Chart / Release */ -}}
{{- $_ := set $values "Chart" (dict "Name" .Chart.Name "Version" .Chart.Version) }}
{{- $_ := set $values "Release" (pick .Release "Name" "Namespace" "Service") }}
  values.yaml: {{ $values | toYaml | b64enc | quote }}

  {{- with .Values.hub.db.password }}
  # Used to mount MYSQL_PWD or PGPASSWORD on hub pod, unless hub.existingSecret
  # is set as then that k8s Secret's value must be specified instead.
  hub.db.password: {{ . | b64enc | quote }}
  {{- end }}

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.
  {{- range $key, $service := .Values.hub.services }}
  hub.services.{{ $key }}.apiToken: {{ include "eric-mxe-jupyterhub.hub.services.get_api_token" (list $ $key) | b64enc | quote }}
  {{- end }}

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: {{ include "eric-mxe-jupyterhub.hub.config.ConfigurableHTTPProxy.auth_token" . | required "This should not happen: blank output from 'jupyterhub.hub.config.ConfigurableHTTPProxy.auth_token' template" | b64enc | quote }}
  hub.config.JupyterHub.cookie_secret: {{ include "eric-mxe-jupyterhub.hub.config.JupyterHub.cookie_secret" . | required "This should not happen: blank output from 'jupyterhub.hub.config.JupyterHub.cookie_secret' template" | b64enc | quote }}
  hub.config.CryptKeeper.keys: {{ include "eric-mxe-jupyterhub.hub.config.CryptKeeper.keys" . | required "This should not happen: blank output from 'jupyterhub.hub.config.CryptKeeper.keys' template" | b64enc | quote }}

  {{- with include "eric-mxe-jupyterhub.extraFiles.data" .Values.hub.extraFiles }}
  {{- . | nindent 2 }}
  {{- end }}

{{- with include "eric-mxe-jupyterhub.extraFiles.stringData" .Values.hub.extraFiles }}
stringData:
  {{- . | nindent 2 }}
{{- end }}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ include "eric-mxe-jupyterhub.singleuser-extrafile-secret-name" . | quote }}
  labels:
    app.kubernetes.io/component: "singeluser-extrafiles-secret"
    app.kubernetes.io/name: {{ include "eric-mxe-jupyterhub.singleuser-extrafile-secret-name" . | quote }}
    {{- include "eric-mxe-jupyterhub.labels" . | nindent 4 }}
  annotations: {{ include "eric-mxe-jupyterhub.annotations" . | nindent 4 }}
type: Opaque
stringData:
  "server_config": |
{{- tpl (.Files.Get "files/server/jupyter_server_config.py") $ | nindent 4 }}
